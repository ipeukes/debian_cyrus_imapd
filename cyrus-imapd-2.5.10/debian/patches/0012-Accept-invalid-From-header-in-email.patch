From: "Jeroen van Meeuwen (Kolab Systems)" <vanmeeuwen@kolabsys.com>
Date: Tue, 3 Aug 2010 10:13:36 +0200
Subject: Accept invalid From: header in email

This stops Cyrus from ruining everything all by itself; Your MTA is
the point where the validity of headers should be checked. For more
information on such and so forth, see (amongst others):

    http://www.postfix.org/header_checks.5.html

If one chooses to allow slightly invalid headers in the MTA, then
Cyrus should not raise problems.
---
 imap/message.c | 17 ++++++++++++++---
 1 file changed, 14 insertions(+), 3 deletions(-)

diff --git a/imap/message.c b/imap/message.c
index 777844f..d225609 100644
--- a/imap/message.c
+++ b/imap/message.c
@@ -166,6 +166,8 @@ EXPORTED int message_copy_strict(struct protstream *from, FILE *to,
     int reject8bit = config_getswitch(IMAPOPT_REJECT8BIT);
     int munge8bit = config_getswitch(IMAPOPT_MUNGE8BIT);
     int inheader = 1, blankline = 1;
+    char is_from;
+    static const char * from_header = "From ";
 
     while (size) {
 	n = prot_read(from, buf, size > 4096 ? 4096 : size);
@@ -242,9 +244,18 @@ EXPORTED int message_copy_strict(struct protstream *from, FILE *to,
 	/* Check for valid header name */
 	if (sawnl && buf[0] != ' ' && buf[0] != '\t') {
 	    if (buf[0] == ':') return IMAP_MESSAGE_BADHEADER;
-      if (strstr(buf, "From ") != buf)
-	    for (p = (unsigned char *)buf; *p != ':'; p++) {
-		if (*p <= ' ') return IMAP_MESSAGE_BADHEADER;
+	    p = (unsigned char *) buf;
+	    if (*p == '>') p++;
+	    is_from = (*p == from_header[0])?0:1;
+            for (; *p != ':' && is_from < 5; p++) {
+		if (is_from > 0 && *p != from_header[is_from]) {
+                    is_from = -1;
+		}
+                if (is_from >= 0) {
+                    is_from++;
+                } else {
+                    if (*p <= ' ') return IMAP_MESSAGE_BADHEADER;
+		}
 	    }
 	}
 
